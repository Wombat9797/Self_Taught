▼プログラミング入門

<コメント>
　：プログラムの目的を他の人に伝える説明文のこと
　：記号(#)以降はコードではないので実行されない

<出力>
　：文字列を出力する時は「""」で囲む
　：複数行の文字列の場合は「"""(3重クォート)」で囲む

<行>
　：Pythonのプログラムは行単位で実行される
　：バックスラッシュ「\ or ¥」を使うことで、次の行に続きのプログラムを書くことができる

<キーワード(予約語)>
　：特定の機能を持つ単語のこと(例．for, if)

<スペース>
　：Pythonではインデントでコードブロックの開始と終了を示すことができる

<データ型>
　：オブジェクトの3要素の1つ
　　1．同一性：保存先のメモリの事⇒変化しない
　　2．データ型：データが持つ性質に応じてグループ分けしたもの⇒変化しない
　　3．値：保存されているデータのこと⇒変化する

　文字列(str)データ型
　　：値に文字列を保存しているデータのこと

　整数(int)データ型
　　：値に整数を保存しているデータのこと
　　：四則演算に使用することができる

　浮動小数点数(float)データ型
　　：値に小数点を含む数値を保存しているデータのこと
　　：四則演算子に使用することができる

　ブール(bool)データ型
　　：値に「True」または「False」を保存しているデータのこと

　NoneTypeデータ型
　　：値が存在しないデータのこと(=値が存在しないことを示すために使用する)

<定数と変数>
　：値の種類のこと

　定数
　　：絶対に変わらない値のこと

　変数
　　：変わる可能性のある値のこと
　　：文字列型(str)・整数型(int)・浮動小数点数(float)型・ブール(bool)型のオブジェクトを保存できる

　変数の定義
　⇒変数名 = 保存する値

　インクリメント(増加)
　　：変数の値を増やすこと

　ディクリメント(減少)
　　：変数の値を減らすこと

　変数を使用する時の注意点
　　：保存したデータ(値)をあとで使用する場合だけ、変数に保存する

<構文(シンタックス)>
　：Pythonのコードを書く時のルールのこと
　：構文に従わない場合は構文エラー(SyntaxError)が発生してプログラムは動作しない

<エラーと例外>
　：プログラムの動作に大きな影響を与える現象のこと

　構文エラー(SyntaxEroor)
　　：Pythonの構文に従わない時に発生するエラー
　　：プログラムが全く動作しなくなる

　例外
　　：構文エラー(SyntaxEroor)以外のエラーのこと(例．ZeroDivisionError, IndentationError)
　　：例外が発生することを想定してプログラムを書いていれば、例外が発生してもプログラムの動作を続行できる


<算術演算子>
　：四則演算の計算を行う演算子(オペレーター)のこと
　：演算子(オペレーター)の両辺の値を被演算子(オペランド)と呼ぶ

　数式(expression)
　　：演算子と被演算子の1組

　演算子の優先順位
　　：数式を評価する時の計算順序のルール
　　：Please Excuse My Dear Aunt Sally?
　　　1.Parenthese：()
　　　2.Exponents：累乗
　　　3．Multiplication：掛け算
　　　4.Division：掛け算
　　　5.Addition：足し算
　　　6.Subtraction：引き算

　加算(+)演算子
　　：足し算を行う 例)2 + 2

　減算(-)演算子
　　：引き算を行う 例)7 - 1

　積算(*)演算子
　　：掛け算を行う 例)8 * 2

　除算(/)演算子1
　　：割り算を行う 例13 / 6

　除算(//)演算子2
　　：割り算を行い、小数点以下は切り捨てる 例)13 // 8

　剰余(%)演算子
　　：割り算を行い、余りを算出する 例) 14 % 4

　累乗(**)演算子
　　：繰り返しの掛け算を行う 例)2 ** 3

　偶数と奇数
　　：剰余計算で「2」を使用すると、余り無しは「偶数」で余り有りは「奇数」になる

　剰余(%)演算子の特徴
　　：左辺の値が右辺の値よりも小さい場合は、左辺の値が答えになる

<比較演算子>
　：両辺の値を比較する演算子(オペレーター)のこと
　：算術演算子と同様に数式として評価される

　比較演算子の特徴
　　：出力値がブール型オブジェクト(True or False)のみ

　より大きい(>) 例) 100 > 10

　より小さい(<) 例) 100 < 10

　以上(>=) 例) 2 >= 2

　以下(<=) 例) 1 <= 4

　等価(==) 例) 6 == 9

　非等価(!=) 例) 3 != 2

<論理演算子>
　：算術演算子・比較演算子と同様に数式として評価される

　論理演算子の特徴
　　：比較演算子と同様に出力値がブール型オブジェクト(True or False)のみ

　かつ(and)
　　：両辺ともTrueの場合、評価結果がTrueになる

　あるいは(or)
　　：両辺のどちらかがTrueの場合、評価結果がTrueになる

　否定(not)
　　：評価結果を逆転させる

<条件文>
　：与えられた条件を判定して処理を実行する制御構造の一つ

　条件文の疑似コード
　⇒もし (式) なら
        (条件判定がTrueの場合に実行されるコードブロック)
    そうでなければ
        (条件判定がFalseの場合に実行されるコードブロック)

　if-else文の定義
　⇒ if 条件式:
        条件式がTrueの場合に実行される処理
    else:
        条件式がFalseの場合に実行される処理

　elifキーワード
　　：if-else文に別の条件判定を追加する機能を持つ
　　：評価判定がTrueのelif文のコードブロックのみ実行される(それ以降の条件判定は実行されない)

　if-elif-else文の定義
　⇒if 条件式1
        条件式1がTrueの場合に実行されるコードブロック
    elif 条件式2:
        条件式1がFalseで条件式2がTrueの場合に実行されるコードブロック
    elif 条件式3:
        条件式1・2がFalseで条件式3がTrueの場合に実行されるコードブロック
    elif 条件式x:
        条件式1・2・3がFalseで条件式xがTrueの場合に実行されるコードブロック
    else:
        全ての条件式がFalseの場合に実行されるコードブロック

<文>
　：Pythonのプログラムを構成する部品のようなもの

　単純文
　　：1行のコードで表現される文

　複合文
　　：複数行のコードで表現される文
　　：ヘッダー部分とスイート部分で構成される

　　ヘッダー
　　　：キーワードを含む複合文(節)の1行目のコードのこと
　　　：スイートを制御する機能を持つ
　　
　　スイート
　　　：ヘッダーに続くコードのこと

　空文(空の行)
　　：プログラム実行の際は反映されない