▼関数

<関数>
　：入力値を受け取り、命令を実行して、結果を出力する複合文のこと

　入力値
　　：関数に与える引数のこと

　return
　　：関数が呼び出された時の出力値(戻り値)を定義する機能を持つキーワード
　　：関数を終了する機能を持つキーワード
　　：returnが無い関数は出力値(戻り値)が定義されていないので、NoneType型オブジェクトが出力される

　関数を呼び出す方法
　⇒関数名(引数1, 引数2, ... ,引数x)

　関数の定義
　1.関数名を定義
　2.引数を定義
　3.実行する処理を定義
　4.出力値(戻り値)を定義
　⇒def 関数名(引数):
        実行する処理＋出力値を定義

　複数の引数を持つ関数を定義
　⇒def 関数名(引数1, 引数2, 引数3, ... , 引数x):
        実行する処理＋出力値を定義

　関数の出力値(戻り値)を変数に保存
　　：変数に保存しておくことで、別の場所で使用できる

<組み込み関数>
：Pythonに最初から用意されている関数のこと

　len関数
　　：オブジェクトの長さを出力する
　　：整数型オブジェクトでは使用できない
　　⇒len(引数)

　str関数
　　：入力値(引数)を文字列型オブジェクトに変換する
　　⇒str(引数)

　int関数
　　：入力値(引数)を整数型オブジェクトに変換する
　　⇒int(引数)

　float関数
　　：入力値(引数)を浮動小数点数型オブジェクトに変換する
　　⇒float(引数)

　int・float関数の注意点
　　：入力値(引数)は整数または浮動小数点数に変換できる値である必要がある
　　：変換できない値を入力値(引数)として使用すると例外(ValueError)が発生する

　input関数
　　：ユーザーが入力した値を入力値(引数)として認識して、文字列型オブジェクトで出力する

<関数を再利用する>
　：少ないコードでプログラムを書くことができる
　：共通する処理を関数として定義することで効率化される

<必須引数とオプション引数>
　：関数を呼び出す時の引数の種類のこと

　必須引数
　　：関数を呼び出す時に省略できない入力値のこと
　　：必須引数を省略すると例外が発生する

　オプション引数
　　：関数を呼び出す時に省略できる入力値のこと
　　：オプション引数を省略すると代わりにデフォルト値が使用される
　　⇒def 関数名(引数名=デフォルト値):
          実行する処理と出力値(戻り値)を定義

　必須引数とオプション引数を定義する時に注意点
　　：先に必須引数から定義する

<スコープ>
　：変数を検索・参照・変更できる範囲のこと

　スコープの重要性
　　：変数へのアクセスを制限することにより、予期しない検索・参照・変更を防ぐことができる

　グローバルスコープ(グローバル変数)
　　：関数やクラスの外で定義された変数のこと
　　：プログラムのどこからでも検索・参照・変更が可能

　ローカルスコープ(ローカル変数)
　　：関数やクラスの中で定義された変数のこと
　　：関数やクラスの中でしか変数を検索・参照・変更ができない
　　：関数やクラスの外からアクセスしようとすると例外(NameError)が発生する

　ローカルスコープの中からグローバルスコープ(グローバル変数)を変更する時の注意点
　　：globalキーワードを使用して対象のグローバル変数を明示的に指定する

<例外処理>
　：例外が発生することを想定して、例外が発生した時に実行する代わりの処理を定義すること

　try
　　：例外が発生する可能性を持つ処理であることを定義する機能を持つキーワード

　excep
　　：発生する可能性がある例外を定義する機能を持つキーワード

　例外処理の定義
　⇒try:
        例外が発生する可能性を持つ処理を定義
　　except (発生する可能性がある例外1を定義, ... , 発生する可能性がある例外xを定義):
        例外を発生させる代わりに実行する処理を定義

　例外処理の注意点
　　：try節の中で定義した変数はexcept節内ので使用しない
　　：変数が定義される前の例外が発生する可能性があるため(例外が発生すると後のプログラムは動作しない)

<ドキュメンテーション文字列(docstring)>
　：関数の目的、引数の種類とデータ型、出力値(戻り値)の内容を説明するコメントのこと

　ドキュメンテーション文字列の定義
　⇒"""
　　Returns 関数の目的.
　　:param 引数の種類1: 引数のデータ型1.
　　:param 引数の種類2: 引数のデータ型2.
　　...
　　:param 引数の種類x: 引数のデータ型x
　　:return: 出力値(戻り値)の内容
　　"""