▼オブジェクト指向プログラミングの４大要素

<４大要素>
　1.カプセル化　2.抽象化　3.ポリモーフィズム　4.継承　5.コンポジション

<カプセル化>
　：２つの概念を持つ

　1.「オブジェクトによって複数の変数とメソッドをまとめる」
　　　⇒インスタンス変数でデータ(値)の状態を保持し、メソッドでデータ(値)の状態を変更したり利用したりすること

　2.「データ(値)をクラス内に隠蔽して外から見えないようにする」
　　　⇒メソッドを通してデータ(値)を操作すること

　clientとは
　　：クラスの外からオブジェクトと通してインスタン変数やメソッドを操作するコードのこと

　プライベート変数とプライベートメソッド(⇔パブリック変数とパブリックメソッドs)
　　：クラスの外から参照や操作ができない変数やメソッドのこと
　　　⇒クラス内だけで使用したい変数やメソッドを定義する時に便利

　　：変数やメソッド名の前にアンダースコア(_)を付けることでプライベートであることを定義する
　　　⇒self._変数名
　　　⇒def _メソッド名(self):

　　：Pythonではプライベート変数やプライベートメソッドをクラスやオブジェクト(インスタンス)の外で参照や操作してはいけない

<抽象化(モデル化)>
　：「対象から小さな特徴を取り除いて、本質的な特徴だけ集めた状態」にする手順のこと
　　⇒不要な詳細を省略したオブジェクト(インスタンス)を作成するクラスを定義する

<ポリモーフィズム>
　：「同じインターフェイスでありながらデータ型に合わせて異なる動作をする機能」をプログラムすること

　インターフェイス
　　：関数やメソッドのこと

　ポリモーフィズムのメリット
　　：堅牢で保守や拡張しやすいプログラムを構築することができる

<継承>
　：クラスを作る時に他のクラスからインスタンス変数やメソッドを受け継ぐこと
　　⇒class 子クラス(親クラス):

　親クラス
　　：継承元のクラスのこと

　子クラス
　　：継承先のクラスのこと
　　：独自のインスタンス変数やメソッドを定義することもできる⇒親クラスに影響しない！

　メソッドオーバーライド
　　：親クラスのメソッドを子クラスのメソッドで上書きすること⇒同じメソッド名を使用する！

<コンポジション>
　：別クラスで作成したオブジェクト(インスタンス)を変数として扱うこと(has-a関係)