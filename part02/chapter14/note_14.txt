▼ もっとオブジェクト指向プログラミング

<クラスオブジェクト>
　：Pythonではクラスもオブジェクト(インスタンス)
　　⇒typeクラスを使用して作成するオブジェクト(インスタンス)である！

<クラス変数 vs インスタンス変数>

　1.インスタンス変数
　　：インスタンスオブジェクトに属する変数のこと

　2.クラス変数
　　：クラスオブジェクトに属する変数のこと⇒定義の方法は通常の変数と同じ！

　　クラス変数の特徴
　　　：クラスオブジェクトとそのクラスから作成したインスタンスオブジェクトを通して参照することができる
　　
　　クラス変数のメリット
　　　：クラスオブジェクトとインスタンスオブジェクトを通して何処からでも参照できるので、グローバル変数に頼らなくても済む

　　クラス変数の参照の仕方
　　⇒メソッド内で参照する場合「self.クラス変数名」
　　⇒クラスオブジェクトを通して参照する場合「クラス名.クラス変数名」
　　⇒インスタンスオブジェクトを通して参照する場合「インスタンスオブジェクト.クラス変数名」
　　★クラス外から参照する場合はクラスオブジェクトを通してほうが見やすいかも！！

<特殊メソッド>
　：objectクラスの中で定義された特別な機能を持つメソッドのこと
　：Pythonの全てのクラスはobjectクラスを継承しているので、継承した特殊メソッドをオーバーライドすることができる！

　特殊メソッドの種類
　1.__init__(self)
　　：インスタンスオブジェクトを作成する機能を持つ

　2.__repr__(self)
　　：インスタンスオブジェクトを文字列化する機能を持つ
　　⇒print(インスタンスオブジェクト) = インスタンスオブジェクト.__repr__()

　3.__add__(self, other):
　　：インスタンスオブジェクトを「+」演算子の被演算子として扱える機能を持つ
    ⇒ インスタンスオブジェクトA + インスタンスオブジェクトB = インスタンスオブジェクトA.__add__(インスタンスオブジェクトB)
    ⇒selfは左辺のインスタンスオブジェクトを示している
    ⇒入力値(引数)otherには演算子の右辺のインスタンスオブジェクトが渡される！

　4.__lt__(self, other):
　　：インスタンスオブジェクトを「<」演算子の被演算子として使える機能を持つ
　　⇒インスタンスオブジェクトA < インスタンスオブジェクトB = インスタンスオブジェクトA.__lt__(インスタンスオブジェクトB)
　　⇒selfは左辺のインスタンスオブジェクトを示している
　　⇒入力値(引数)otherには演算子の右辺のインスタンスオブジェクトが渡される！

　5.__gt__(self, other):
　　：インスタンスオブジェクトを「>」演算子の被演算子として扱える機能を持つ
　　⇒インスタンスオブジェクトA > インスタンスオブジェクトB = インスタンスオブジェクトA.__gt__(インスタンスオブジェクトB)
　　⇒selfは左辺のインスタンスオブジェクトを示している
　　⇒入力値(引数)otherには演算子の右辺のインスタンスオブジェクトが渡される！

<is>
　：インスタンスオブジェクトが同一かをブール型で評価するキーワード
　　⇒同じクラスから作成したインスタンスオブジェクトでも作成毎に異なるインスタンスオブジェクトとして認識される！

　：変数のデータ(値)がNone型オブジェクトかを確認することもできる！