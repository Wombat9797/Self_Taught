▼プログラミングパラダイム

<プログラミングパラダイム>
　：プログラミングのスタイル・手法のこと

　プログラミングパラダイムの種類
　1.手続き型　2.関数型　3.オブジェクト指向型

　プログラミングパラダイムごとの大きな違い
　　：状態(ステート)の持ち方

　状態(ステート)とは
　　：プログラムが動いている時の「変数の値」のこと

　グローバルステートとは
　　：プログラムが動いているときの「グローバル変数の値」のこと

<手続き型プログラミング>
　：データをグローバル変数で持ち、関数で操作するパラダイムのこと

　メリット
　　：シンプルで短いプログラムなら書きやすい

　副作用
　　：プログラムが複雑になるとグローバル変数の「意図しない変更」が発生する可能性が高まる

<関数型プログラミング>
　：グローバルステートを排除し、データを関数の入力値(引数)で操作するパラダイムのこと

　メリット
　　：グローバルステートに依存しないので、変数の「予期せぬ変更」を防ぐことができる

　副作用
　　：グローバルステートを使用した方が扱いやすいプログラムを書きにくい

<オブジェクト指向プログラミング>
　：グローバルステートを排除し、データ(値)をクラスで操作するパラダイムのこと

　クラス
　　：共通の属性情報をまとめて定義したもの

　インスタンス
　　：それぞれ異なるデータ(値)を持つ、クラスから作られるオブジェクトのこと(=属性情報は同じ)

　利点
　　：クラスで共通属性を定義することで、データ(値)が異なるインスタンス(オブジェクト)を簡単に再生産できる=コードの再利用

　欠点
　　：プログラムの計画と設計が複雑なので時間が掛かる

　クラスの定義
　⇒Class クラス名:
        スイート部分(単純文やメソッドを定義)

　メソッドとは
　　：クラスの中で定義する関数のこと⇒引数を少なくとも1つ定義する必要がある
    ⇒class クラス名：
         def __init__(self, 引数1, 引数2, 引数3, ... , 引数x):
            実行する処理を定義

　特殊メソッドとは
　　：インスタンス(オブジェクト)を作成する目的で定義した、ダブルアンダースコア(__init__)で囲まれたメソッドのこと

　インスタンス変数とは
　　：メソッド中で定義する変数のこと
    ⇒class クラス名:
         def __init__(self, 引数1, 引数2, 引数3, ... , 引数x):
            self.インスタンス変数名 = 値

　インスタンス変数のデータ(値)を取得
　⇒作成したオブジェクト名.インスタンス変数

　インスタンス変数のデータ(値)を更新(再保存)
　⇒作成したオブジェクト名.インスタンス変数 = 値

  クラスからインスタンス(オブジェクト)を作成(クラスのインスタンス化)
  ⇒クラス名(引数1, 引数2, 引数3, ... , 引数x) ※第1引数の「self」に入力値(引数)を渡す必要はない！

  クラス内のメソッドを呼び出す
  ⇒オブジェクト名.メソッド(引数1, 引数2, 引数3, ... , 引数4)

  メソッド内で同じクラスの別メソッドを呼び出す
  ⇒self.別メソッド(self, 引数1, 引数2, 引数3, ... , 引数4)
