▼ 知識を１つにまとめる

<ウェブスクレイパー>
　：ウェブサイトのページを取得して欲しい情報を収集・分析・抽出(スクレイピング)するプログラムのこと

<HTML>
　：ウェブサイトを構築する際のマークアップ言語のこと
　⇒Hyper Text Markup Language

　マークアップ(Markup)
　　：文字で文字を修飾すること

<Googleニュースをスクレイピング>
　1.Googleニュースから全てのリンク(<a></a>)タグを読み取り
　2.リンク先の全ての記事を取得
　3.取得した記事をパース(構文解析)
　　⇒HTML(取得した記事)をPython(プログラミング記事)を使って構造化！

　パース(構文解析)
　　：データフォーマットをプログラミング言語を使って構造化すること

　BeautifulSopu4
　　：Pythonでパースする時に使用するパッケージのこと

　　1.BeautifulSopu()
　　　：指定したHTMLデータをパースする機能を持つメソッド
　　　　⇒BeautifulSoup(指定したHTMLデータ, 利用するパーサー)
　　　　⇒HTMLデータをパースする際のパーサーは「html.parser」
　　　　⇒出力値(戻り値)はBeautifulSopuオブジェクト

　urllibモジュール
　　：PythonでURLを扱う為の組み込みモジュール
　　
　　1.urllib.requestモジュール
　　　：HTTP送信に特化したモジュール

　　　urllib.requesutモジュールのメソッド
　　　1.urlopenメソッド
　　　　：指定したサイトURLのHTMLと追加情報を取得してResponseオブジェクトとして出力
　　　　　⇒urlopen(対象サイトのURL)

　Responseオブジェクト
　　：urlopenメソッドの出力値(戻り値)のこと

　　read()
　　　：Responseオブジェクトに保存したHTMLデータを出力する機能を持つメソッド

<スクレイパーの作成手順>
1.必要なモジュールとメソッドをインポート
　1.urllib.requestモジュール⇒openurlメソッドを使用するため！
　2.BeautifulSopuメソッド⇒HTMLデータのパース(構文解析)を実行するため！

2.スクレイピングするクラスを定義
　1.スクレイピング対象のサイトURLを保持するインスタンスオブジェクトを作成⇒特殊メソッド(__init__)のオーバーライド！
　2.スクレイピングを制御するメソッドを定義
    1.スクレイピング対象のウェブサイトのHTMLデータを取得⇒urlopenメソッドを使用してResponseオブジェクトとして保持！
    2.HTMLデータを読込⇒Resposnseオブジェクトに対してreadメソッドを使用！
    3.出力したHTMLデータをパース(構造化)⇒BeautifulSoupメソッドをしてBeautifulオブジェクトとして保持！
    4.スクレイピング処理を制御
        1..パースしたHTMLデータの中から全てのリンクタグ(aタグ)を取得して１つずつ割り当てる⇒forループ処理とfind_allメソッドを使用してリスト型オブジェクトとして保持！
        2.取得したリンクタグ(aタグ)からhref属性の値を取得⇒getメソッドを使用！
        3.href属性がNone型オブジェクトの場合と「articles」を含む場合の処理を分岐⇒if条件文を使用！
        4.取得したURLを外部に書き込む場合
            1.書き込み先のファイルを作成⇒with構文とopen関数を使用！
            2..パースしたHTMLデータの中から全てのリンクタグ(aタグ)を取得して１つずつ割り当てる⇒forループ処理とfind_allメソッドを使用してリスト型オブジェクトとして保持！
            3.取得したリンクタグ(aタグ)からhref属性の値を取得⇒getメソッドを使用！
            4.href属性がNone型オブジェクトの場合と「articles」を含む場合の処理を分岐⇒if条件文を使用
            5.href属性のデータ(値)をファイルに書き込む⇒writeメソッドを使用！