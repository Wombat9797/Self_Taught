▼ バージョン管理

<コードベース>
　：ソフトウェアのフォルダやファイルの集まりで、ほかの人の変更を全員で共有するコードのこと

<バージョン管理システム(Version Control System)>
　：複数のプログラマーが、プロジェクト内で相互のコードを共有するための管理ツールのこと

<リポジトリ>
　：コードの変更箇所(変更差分)を記録したデータ構造のこと

　ローカルリポジトリ
　　：ローカルコンピュータ内にあるリポジトリ

　中央リポジトリ
　　：ローカルリポジトリと同期されるリポジトリ
　　⇒各プログラマーの変更箇所(変更差分)は同期を通してローカルリポジトリに反映される！

<はじめよう>
　：中央リポジトリからローカルリポジトリを作成
　⇒git clone 中央リポジトリURL
　
　ローカルリポジトリのクローン先を指定
　　：ローカルレポジトリを保存したいディレクトリに移動した後にクローンを作成

<プッシュとプル>
　：Gitの２つの主な機能

　1.プッシュ
　　：ローカルリポジトリの変更箇所(変更差分)を中央リポジトリと同期する方法

　2.プル
　　：中央リポジトリの変更箇所(変更差分)をローカルリポジトリと同期する方法

　プッシュやプルする中央リポジトリを確認
　⇒cd ローカルリポジトリのディレクトリ(フォルダ)
　　git remote -v
　：２行のURLで「fetch」はプルする相手の中央リポジトリ、「push」はプッシュする相手の中央リポジトリを表示

<プッシュしてみよう>
　：ローカルリポジトリの変更箇所(変更差分)を中央リポジトリと同期する方法

　1.ステージ状態
　　：最終的にローカルリポジトリと中央リポジトリが同期できる状態のこと
　　⇒「git status」でローカルリポジトリの状態を確認できる！
　　⇒「git add ファイルパス」でローカルリポジトリをステージ状態に変更できる！(ファイル名は緑色)
　　⇒「git reset ファイルパス」でローカルリポジトリをステージ状態から解除できる！(ファイル名は赤色)

　2.コミット
　　：ステージ状態の変更箇所(変更差分)をローカルリポジトリへ保存すること
　　⇒git commit -m "変更の目的を記載"

　3.中央リポジトリへプッシュ
　　⇒git push origin ブランチ名
　　⇒プッシュ完了後はステージ状態をリセットしたほうがいいかも！

<プルしてみよう>
　：中央リポジトリの変更箇所(変更差分)をローカルリポジトリと同期する方法

  1.ローカルレポジトリへプル
  　⇒git pull origin ブランチ名

<前のバージョンに戻す>
　：Gitは過去のコミット(=過去の変更箇所)を全て記録している

　コミット番号
　　：各コミット(=変更箇所)に付与された識別IDのこと

　過去のコミット番号を確認する方法
　　⇒git log

　指定したコミット番号のコードに戻す方法
　　⇒git checkout コミット番号

　前のバージョンに戻した時の注意点
　　：ブランチが途切れてコミットができなくなる
　　　⇒元のブランチに移動して解決「git checkout 移動先のブランチ名 」
　　　⇒新しいブランチを作成して解決「git branch 新しいブランチ名」

<差分>
　：ローカルリポジトリに記録されていない変更箇所(変更差分)のこと
　⇒git diff 変更を行ったファイルパス

　変更差分の確認手順
　　1.対象のファイルをステージ状態に変更
　　2.コミット
　　3.ファイルを編集
　　4.「git diff」コマンドで変更箇所(変更差分)を表示

　差分表示の注意点
　　：１列の１文字でも変更すると１行削除・１行追加を認識される！