▼ アルゴリズム

<アルゴリズム>
　：特定の問題を解決する為の再現可能な一連の手順のこと

<FizzBuzz>
　：アルゴリズム構築の能力を調べる為のテスト

　ルール
    1.整数1-100を出力するプログラムである
    2.3の倍数の場合は「Fizz」と出力
    3.5の倍数の場合は「Buzz」と出力
    4.3と5の倍数の場合は「FizzBuzz」と出力

　ポイント
　　：複雑な条件判定から優先的に評価判定する！

<線形探索(sequential search)>
　：データ構造の要素(オブジェクト)を１個ずつ確認して目的のデータ(値)を探し出す探索アルゴリズム

　探索アルゴリズム
　　：データ構造の中から目的にデータ(値)を探す出す処理のこと

<回文(palindrome)>
　：初めから読んでも終わりから読んでも同じになる文章のこと

　回文を確認するアルゴリズム
　　：文章を逆転して元の文章と一致するかどうか確認する

　リバースのステップスライス
　　⇒繰り返し可能(イテラブル)なオブジェクト[::-1]
　　：開始インデックスと終了インデックスは省略 = スライス対象は繰り返し可能(イテラブル)なオブジェクト全体！
　　：ステップ値に「-1」を指定 = 終端の要素(オブジェクト)から１個ずつ要素(オブジェクト)を取得する⇒リバース

<アナグラム(anagram)>
　：単語の文字を並び替えて別の文字を作ること

　アナグラムのアルゴリズム
　　：文字列をアルファベット順に並び替えて一致するかどうか確認する

　イテラブルなオブジェクトをソート
　　⇒sorted(イテラブルなオブジェクト)
　　：入力値(引数)として渡されたオブジェクトをソートして、新しいオブジェクトとして出力する

<出現する文字列を数えるアルゴリズム>
　1.対象の文字列型オブジェクトをイテラブルなオブジェクトとして１個ずつ取得 = forループ処理
　2.各文字の出現回数を辞書に保存

　defaultdict関数
　　：バリューに規定値(初期値)を設定して辞書型オブジェクトを作成する関数(collectionsモジュール)
　　　⇒バリューが存在しないエラーを防ぐことが可能
　　　⇒キーが存在しない場合は自動的にキーバリューペアを作成
　　　⇒defaultdict(規定値となる関数)

　Counter関数
　　：オブジェクト(文字列やリスト・辞書など)の要素数を集計して辞書型オブジェクトとして出力する関数(collectionsモジュール)
　　　⇒forループ処理を使用しないで要素(オブジェクト)数を集計できる！
　　　⇒Counter(集計するオブジェクト)

<再帰法(recursion)>
　：大きな問題を小さな問題に分割して解決する分割統治法の手法
　：関数からその関数自身を呼び出す⇒再帰関数

　再帰法を構築するポイント
　1.再帰終了条件を設定する = 無限再帰を防ぐため
　2.再帰関数が呼び出される毎に再帰終了条件に近づかなければならない = 無限再帰を防ぐため
　3.再帰的に関数を呼び出さなければならない(再帰終了条件に近づくため) = 無限再帰を防ぐため

　反復法
　　：分割統治法とは異なる解決手法
　　　⇒手順を繰り返すことで問題を解決する(forループを使用)