▼ プログラミングのベストプラクティス

<製品コード>
　：人が利用する製品に含まれるコードのこと

<コードを書くのは最後の手段>
　：ソフトウェアエンジニアの仕事は少ないコードで問題を解決すること
　　⇒「他の誰かが既に同じ問題を解決していないだろうか？」と最初に考えることが重要である！

<DRY(Don't Repeat Yourself)>
　：プログラミングの原則
　　⇒コードを書く時は同じような作業を繰り返してはいけない！ = クラスや関数を使用して再利用できるようにする！

<直行性>
　：プログラミングの原則
　　⇒「aはbに影響するべきでない」 = あるプログラムの変更が他のプログラムに変更を生じさせていはいけない！

<どのデータも１カ所で定義しよう>
　：複数のプログラムが参照するデータは格納先を１つに限定する = 修正箇所の分散を防ぐことができる！

<１つの関数には１つのことだけをさせよう>
　：関数は１つのタスクに集中する」
　　⇒関数名と実装が近くなりコードが読みやすくなる！
　　⇒エラーが発生してもデバッグが簡単になる！

<慣例に従おう>
　：Pythonでは「PEP 8」を読んでコーディング規約に従うようにする

<強力なIDEを使おう>
　：JetBrains社が開発した「Pycharm」がPythonのIEDとして非常に良い

<ロギング>
　：ソフトウェアの動作を記録すること
　　⇒Pythonでは「logging」モジュールを使用することでコンソールやファイルに記録することができる！
　　⇒デバッグやデータの収集と分析に活用できる！

<テスト>
　：ソフトウェアの動作を確認すること
　　⇒Pythonでは「unittest」モジュールを使用することで動作を確認することができる！

<コードレビュー>
　：誰かにコードを読んでもらいフィードバックを受けること
　　⇒コードを改善するポイントを指摘してもらえる！

<セキュリティ>
　：コードの安全性を保つこと
　　1.rootユーザーでのログインを無効にする
　　2.ユーザーの入力を信用しない
　　3.攻撃対象領域を最小化する
        ┗機密性の高いデータは保存しない！
        ┗ユーザーに与えるアクセス権を小さくする！
        ┗サードパーティライブラリの使用を可能な限りさける！ = コードを減らすことで脆弱性を小さくする
        ┗利用しなくなった機能を削除する！ = コードを減らすことで脆弱性を小さくする

　：コードが複雑になるほど脆弱性の危険性も高まる